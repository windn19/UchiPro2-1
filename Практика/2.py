# Напиши программу для вычисления значения арифметического выражения записанного с помощью обратной польской записи.
#
# Обратная польская запись - это форма записи математических и логических выражений, в которой операнды расположены
# перед знаками операций. Например, запись арифметического выражения в обратной польской нотации 1 2 + 4 * 3 +
# соответствует арифметическому выражению (1 + 2) * 4 + 3.

# Вычисление выражения в обратной польской записи основано на использовании стека, при этом можно сформулировать
# следующий алгоритм:
# 1. запускаем цикл по всем символам:
# 2. если символ это число - оно помещается в стек.
# 3. если символ  это знак операции, то со стека снимается два числа и соответствующая операция выполняется
# над этими числами. Результат операции помещается в стек.
# 4. после завершения цикла в стеке остался один элемент - результат арифметического выражения.
#
# Входные данные:
# Строка, содержащая числа и арифметические операции (+, -, *, / - деление нацело) разделенные одним пробелом.
#
# Выходные данные:
# Одной целое число - результат арифметического выражения.
#
# Пример ввода:
# 7 2 3 * -
#
# Пример вывода:
# 1


# class Stack:
#     def __init__(self):
#         self.items = []
#
#     def push(self, value):
#         self.items.append(value)
#
#     def pop(self):
#         return self.items.pop()
class Stack(list):
    def push(self, value):
        self.append(value)


stack = Stack()
line = input()
operations = '+-*/'
for elem in line.split():
    if elem in operations:
        second_num = stack.pop()
        first_num = stack.pop()
        if elem == '+':
            stack.push(first_num + second_num)
        elif elem == '-':
            stack.push(first_num - second_num)
        elif elem == '*':
            stack.push(first_num * second_num)
        elif elem == '/':
            stack.push(first_num // second_num)
    else:
        stack.push(int(elem))
print(stack.pop())
